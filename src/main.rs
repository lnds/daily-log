use daily_log::app::App;
use daily_log::cli::{Cli, Commands};
use daily_log::commands;
use clap::Parser;

fn main() -> color_eyre::Result<()> {
    color_eyre::install()?;

    let cli = Cli::parse();

    match cli.command {
        Some(Commands::Now { 
            entry, 
            note, 
            back, 
            section, 
            finish_last, 
            from, 
            editor, 
            ask, 
            noauto 
        }) => {
            commands::handle_now(commands::NowOptions {
                entry, 
                note, 
                back, 
                section, 
                finish_last, 
                from, 
                editor, 
                ask, 
                _noauto: noauto,
            })?;
        }
        Some(Commands::Last) => {
            commands::handle_last()?;
        }
        Some(Commands::Recent { count, section }) => {
            commands::handle_recent(count, section)?;
        }
        Some(Commands::Today { section }) => {
            commands::handle_today(section)?;
        }
        Some(Commands::Tui { section }) => {
            let terminal = ratatui::init();
            let result = App::new_with_section(section).run(terminal);
            ratatui::restore();
            result?;
        }
        Some(Commands::Done {
            entry,
            note,
            ask,
            back,
            at,
            took,
            from,
            section,
            editor,
            archive,
            remove,
            unfinished,
            date,
            noauto,
        }) => {
            commands::handle_done(commands::DoneOptions {
                entry,
                note,
                ask,
                back,
                at,
                took,
                from,
                section,
                editor,
                archive,
                remove,
                unfinished,
                _date: date,
                _noauto: noauto,
            })?;
        }
        Some(Commands::Finish {
            count,
            archive,
            at,
            auto,
            back,
            from,
            interactive,
            not,
            remove,
            sections,
            search,
            took,
            tag,
            unfinished,
            update,
            exact,
            date,
        }) => {
            commands::handle_finish(commands::FinishOptions {
                count,
                archive,
                at,
                auto,
                back,
                from,
                interactive,
                not,
                remove,
                sections,
                search,
                took,
                tag,
                unfinished,
                update,
                exact,
                date,
            })?;
        }
        Some(Commands::Did {
            entry,
            note,
            ask,
            back,
            at,
            took,
            from,
            section,
            editor,
            archive,
            remove,
            unfinished,
            date,
            noauto,
        }) => {
            // Did is an alias for done
            commands::handle_done(commands::DoneOptions {
                entry,
                note,
                ask,
                back,
                at,
                took,
                from,
                section,
                editor,
                archive,
                remove,
                unfinished,
                _date: date,
                _noauto: noauto,
            })?;
        }
        Some(Commands::Cancel {
            count,
            archive,
            interactive,
            not,
            sections,
            search,
            tag,
            unfinished,
            exact,
        }) => {
            commands::handle_cancel(commands::CancelOptions {
                count,
                archive,
                interactive,
                not,
                sections,
                search,
                tag,
                unfinished,
                exact,
            })?;
        }
        Some(Commands::Delete {
            count,
            interactive,
            not,
            sections,
            search,
            tag,
            exact,
            force,
        }) => {
            commands::handle_delete(commands::DeleteOptions {
                count,
                interactive,
                not,
                sections,
                search,
                tag,
                exact,
                force,
            })?;
        }
        Some(Commands::Again {
            noauto,
            ask,
            back,
            bool_op,
            case,
            editor,
            interactive,
            in_section,
            note,
            not,
            sections,
            search,
            tag,
            val,
            exact,
        }) => {
            commands::handle_again(commands::AgainOptions {
                noauto,
                ask,
                back,
                _bool_op: bool_op,
                case,
                editor,
                interactive,
                in_section,
                note,
                not,
                sections,
                search,
                tag,
                _val: val,
                exact,
            })?;
        }
        Some(Commands::Tag {
            tags,
            autotag,
            bool_op,
            count,
            case,
            date,
            force,
            interactive,
            not,
            remove,
            regex,
            rename,
            sections,
            search,
            tag,
            unfinished,
            value,
            val,
            exact,
        }) => {
            commands::handle_tag(commands::TagOptions {
                tags,
                _autotag: autotag,
                _bool_op: bool_op,
                count,
                case,
                date,
                force,
                interactive,
                not,
                remove,
                regex,
                rename,
                sections,
                search,
                tag,
                unfinished,
                value,
                _val: val,
                exact,
            })?;
        }
        Some(Commands::Note {
            note,
            ask,
            bool_op: _,
            case,
            editor,
            interactive,
            not,
            remove,
            sections,
            search,
            tag,
            val: _,
            exact,
        }) => {
            commands::handle_note(
                commands::NoteFilterOptions {
                    sections,
                    search,
                    tag,
                    case,
                    exact,
                    not,
                },
                commands::NoteOptions {
                    note: note,
                    ask,
                    editor,
                    remove,
                },
                interactive,
            )?;
        }
        Some(Commands::Resume {
            noauto,
            ask,
            back,
            bool_op,
            case,
            editor,
            interactive,
            in_section,
            note,
            not,
            sections,
            search,
            tag,
            val,
            exact,
        }) => {
            // Resume is an alias for again
            commands::handle_again(commands::AgainOptions {
                noauto,
                ask,
                back,
                _bool_op: bool_op,
                case,
                editor,
                interactive,
                in_section,
                note,
                not,
                sections,
                search,
                tag,
                _val: val,
                exact,
            })?;
        }
        Some(Commands::Mark {
            bool_op,
            count,
            case,
            date,
            force,
            interactive,
            not,
            remove,
            sections,
            search,
            tag,
            unfinished,
            val,
            exact,
        }) => {
            commands::handle_mark(commands::MarkOptions {
                _bool_op: bool_op,
                count,
                case,
                date,
                force,
                interactive,
                not,
                remove,
                sections,
                search,
                tag,
                unfinished,
                _val: val,
                exact,
            })?;
        }
        Some(Commands::Flag {
            bool_op,
            count,
            case,
            date,
            force,
            interactive,
            not,
            remove,
            sections,
            search,
            tag,
            unfinished,
            val,
            exact,
        }) => {
            // Flag is an alias for mark
            commands::handle_mark(commands::MarkOptions {
                _bool_op: bool_op,
                count,
                case,
                date,
                force,
                interactive,
                not,
                remove,
                sections,
                search,
                tag,
                unfinished,
                _val: val,
                exact,
            })?;
        }
        Some(Commands::Reset {
            date_string,
            bool_op,
            case,
            from,
            interactive,
            no_resume,
            not,
            resume,
            sections,
            search,
            took,
            tag,
            val,
            exact,
        }) => {
            commands::handle_reset(commands::ResetOptions {
                date_string,
                _bool_op: bool_op,
                case,
                from,
                interactive,
                no_resume,
                not,
                resume,
                sections,
                search,
                took,
                tag,
                _val: val,
                exact,
            })?;
        }
        Some(Commands::Begin {
            date_string,
            bool_op,
            case,
            from,
            interactive,
            no_resume,
            not,
            resume,
            sections,
            search,
            took,
            tag,
            val,
            exact,
        }) => {
            // Begin is an alias for reset
            commands::handle_reset(commands::ResetOptions {
                date_string,
                _bool_op: bool_op,
                case,
                from,
                interactive,
                no_resume,
                not,
                resume,
                sections,
                search,
                took,
                tag,
                _val: val,
                exact,
            })?;
        }
        Some(Commands::Show {
            args,
            age,
            after,
            before,
            bool_op,
            count,
            case,
            config_template,
            duration,
            editor,
            from,
            hilite,
            interactive,
            menu,
            not,
            output,
            only_timed,
            sections,
            save,
            search,
            sort,
            times,
            tag,
            tag_order,
            tag_sort,
            template,
            title,
            totals,
            val,
            exact,
        }) => {
            commands::handle_show(
                commands::ShowFilterOptions {
                    args,
                    age,
                    after,
                    before,
                    bool_op,
                    case,
                    from,
                    not,
                    only_timed,
                    sections,
                    search,
                    tag,
                    val,
                    exact,
                },
                commands::ShowDisplayOptions {
                    count,
                    duration,
                    hilite,
                    output,
                    sort,
                    times,
                    tag_order,
                    tag_sort,
                    totals,
                },
                commands::ShowUIOptions {
                    interactive,
                    menu,
                    _editor: editor,
                },
                commands::ShowConfigOptions {
                    _config_template: config_template,
                    _save: save,
                    _template: template,
                    _title: title,
                },
            )?;
        }
        Some(Commands::Grep {
            pattern,
            after,
            before,
            bool_op,
            case,
            config_template,
            delete,
            duration,
            editor,
            from,
            hilite,
            interactive,
            not,
            output,
            only_timed,
            sections,
            save,
            times,
            tag,
            tag_order,
            tag_sort,
            template,
            title,
            totals,
            val,
            exact,
        }) => {
            commands::handle_grep(
                commands::GrepFilterOptions {
                    pattern,
                    after,
                    before,
                    bool_op,
                    case,
                    from,
                    not,
                    only_timed,
                    sections,
                    tag,
                    val,
                    exact,
                },
                commands::GrepDisplayOptions {
                    duration,
                    hilite,
                    output,
                    times,
                    tag_order,
                    tag_sort,
                    totals,
                },
                commands::GrepActionOptions {
                    delete,
                    interactive,
                    _editor: editor,
                },
                commands::GrepConfigOptions {
                    _config_template: config_template,
                    _save: save,
                    _template: template,
                    _title: title,
                },
            )?;
        }
        Some(Commands::Search {
            pattern,
            after,
            before,
            bool_op,
            case,
            config_template,
            delete,
            duration,
            editor,
            from,
            hilite,
            interactive,
            not,
            output,
            only_timed,
            sections,
            save,
            times,
            tag,
            tag_order,
            tag_sort,
            template,
            title,
            totals,
            val,
            exact,
        }) => {
            // Search is an alias for grep
            commands::handle_grep(
                commands::GrepFilterOptions {
                    pattern,
                    after,
                    before,
                    bool_op,
                    case,
                    from,
                    not,
                    only_timed,
                    sections,
                    tag,
                    val,
                    exact,
                },
                commands::GrepDisplayOptions {
                    duration,
                    hilite,
                    output,
                    times,
                    tag_order,
                    tag_sort,
                    totals,
                },
                commands::GrepActionOptions {
                    delete,
                    interactive,
                    _editor: editor,
                },
                commands::GrepConfigOptions {
                    _config_template: config_template,
                    _save: save,
                    _template: template,
                    _title: title,
                },
            )?;
        }
        Some(Commands::On {
            date_string,
            after,
            before,
            bool_op,
            case,
            config_template,
            duration,
            from,
            not,
            output,
            only_timed,
            sections,
            save,
            search,
            times,
            tag,
            tag_order,
            tag_sort,
            template,
            title,
            totals,
            val,
            exact,
        }) => {
            commands::handle_on(
                commands::OnFilterOptions {
                    date_string,
                    after,
                    before,
                    bool_op,
                    case,
                    from,
                    not,
                    only_timed,
                    sections,
                    search,
                    tag,
                    val,
                    exact,
                },
                commands::OnDisplayOptions {
                    duration,
                    output,
                    times,
                    tag_order,
                    tag_sort,
                    totals,
                },
                commands::OnConfigOptions {
                    _config_template: config_template,
                    _save: save,
                    _template: template,
                    _title: title,
                },
            )?;
        }
        Some(Commands::Since {
            date_string,
            bool_op,
            case,
            config_template,
            duration,
            not,
            output,
            only_timed,
            sections,
            save,
            search,
            times,
            tag,
            tag_order,
            tag_sort,
            template,
            title,
            totals,
            val,
            exact,
        }) => {
            commands::handle_since(
                commands::SinceFilterOptions {
                    date_string,
                    bool_op,
                    case,
                    not,
                    only_timed,
                    sections,
                    search,
                    tag,
                    val,
                    exact,
                },
                commands::SinceDisplayOptions {
                    duration,
                    output,
                    times,
                    tag_order,
                    tag_sort,
                    totals,
                },
                commands::SinceConfigOptions {
                    _config_template: config_template,
                    _save: save,
                    _template: template,
                    _title: title,
                },
            )?;
        }
        Some(Commands::Yesterday {
            after,
            before,
            config_template,
            duration,
            from,
            output,
            only_timed,
            sections,
            save,
            times,
            tag_order,
            tag_sort,
            template,
            title,
            totals,
        }) => {
            commands::handle_yesterday(commands::YesterdayOptions {
                after,
                before,
                _config_template: config_template,
                duration,
                from,
                output,
                only_timed,
                sections,
                _save: save,
                times,
                tag_order,
                tag_sort,
                _template: template,
                _title: title,
                totals,
            })?;
        }
        Some(Commands::Sections { action }) => {
            commands::handle_sections(action)?;
        }
        Some(Commands::Archive {
            target,
            after,
            before,
            bool_op,
            case,
            from,
            keep,
            label,
            not,
            search,
            to,
            tag,
            val,
            exact,
        }) => {
            commands::handle_archive(commands::ArchiveOptions {
                target,
                after,
                before,
                _bool_op: bool_op,
                case,
                from,
                keep,
                label,
                not,
                search,
                to,
                tag,
                val,
                exact,
            })?;
        }
        Some(Commands::Rotate {
            before,
            bool_op,
            case,
            keep,
            not,
            section,
            search,
            tag,
            val,
            exact,
        }) => {
            commands::handle_rotate(commands::RotateOptions {
                before,
                _bool_op: bool_op,
                case,
                keep,
                not,
                section,
                search,
                tag,
                val,
                exact,
            })?;
        }
        Some(Commands::Tags {
            max_count,
            bool_op: _,
            counts,
            case,
            interactive,
            line,
            not,
            order,
            section,
            search,
            sort,
            tag,
            val,
            exact,
        }) => {
            commands::handle_tags(
                commands::tags::TagsFilterOptions {
                    section,
                    search,
                    tag,
                    val,
                    case,
                    exact,
                    not,
                },
                commands::tags::TagsDisplayOptions {
                    max_count,
                    counts,
                    line,
                    order,
                    sort,
                },
                interactive,
            )?;
        }
        None => {
            // If no command but task words provided, treat as "now" command
            if !cli.task.is_empty() {
                commands::handle_now(commands::NowOptions {
                    entry: cli.task, 
                    note: None, 
                    back: None, 
                    section: None, 
                    finish_last: false, 
                    from: None, 
                    editor: false, 
                    ask: false, 
                    _noauto: false,
                })?;
            } else {
                // If no command and no task words, show recent entries
                commands::handle_recent(10, None)?;
            }
        }
    }

    Ok(())
}
