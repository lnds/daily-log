name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-features --workspace

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info

  validate-version:
    name: Validate Pragmatic Versioning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate version format
      run: |
        VERSION=$(grep -E '^version = "' Cargo.toml | sed 's/version = "//; s/"//')
        echo "Found version: $VERSION"
        
        # Validate Pragmatic Versioning format (BIGRELEASE.ANNOUNCE.INCREMENT)
        if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "Error: Version $VERSION does not match Pragmatic Versioning format (BIGRELEASE.ANNOUNCE.INCREMENT)"
          exit 1
        fi
        
        # Validate that we're still in 0.x.x (pre-stable) phase
        if echo "$VERSION" | grep -E '^[1-9]'; then
          echo "Info: Version $VERSION indicates stable release (1.x.x+)"
        else
          echo "Info: Version $VERSION indicates development phase (0.x.x)"
        fi

  build-cross-platform:
    name: Build Cross-Platform
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}

    - name: Build project
      run: cargo build --release

    - name: Test version command
      run: ./target/release/daily-log --version

    - name: Run smoke test
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ./target/release/daily-log.exe --help > /dev/null
        else
          ./target/release/daily-log --help > /dev/null
        fi