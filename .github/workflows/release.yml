name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get-version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Validate version matches Cargo.toml
      run: |
        CARGO_VERSION=$(grep -E '^version = "' Cargo.toml | sed 's/version = "//; s/"//')
        TAG_VERSION="${{ steps.get-version.outputs.version }}"
        
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "Error: Version mismatch!"
          echo "  Cargo.toml version: $CARGO_VERSION"
          echo "  Git tag version: $TAG_VERSION"
          exit 1
        fi
        echo "Version validation passed: $TAG_VERSION"

    - name: Validate Pragmatic Versioning format
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "Error: Version $VERSION does not match Pragmatic Versioning format"
          exit 1
        fi
        echo "Pragmatic Versioning validation passed: $VERSION"

  build-release:
    name: Build Release Binaries
    needs: validate-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: daily-log-linux-x86_64.tar.gz

          - target: x86_64-apple-darwin
            os: macos-latest
            name: daily-log-macos-x86_64.tar.gz

          - target: aarch64-apple-darwin
            os: macos-latest
            name: daily-log-macos-aarch64.tar.gz

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: daily-log-windows-x86_64.zip

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create release archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.name }} daily-log
        cd ../../..
        ls -la ${{ matrix.name }}

    - name: Create release archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.name }} daily-log.exe
        cd ../../..
        dir ${{ matrix.name }}

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  create-release:
    name: Create GitHub Release
    needs: [validate-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        
        echo "Generating changelog from $PREV_TAG to $CURRENT_TAG"
        
        # Generate changelog
        CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
        
        # Write changelog to file for multiline support
        cat > changelog.txt << EOF
        ## What's Changed
        
        $CHANGELOG
        
        **Full Changelog**: https://github.com/lnds/daily-log/compare/$PREV_TAG...$CURRENT_TAG
        
        ---
        
        ### Installation
        
        Download the appropriate binary for your platform:
        - **Linux**: \`daily-log-linux-x86_64.tar.gz\`
        - **macOS (Intel)**: \`daily-log-macos-x86_64.tar.gz\`  
        - **macOS (Apple Silicon)**: \`daily-log-macos-aarch64.tar.gz\`
        - **Windows**: \`daily-log-windows-x86_64.zip\`
        
        Extract the archive and add the binary to your PATH.
        
        Verify installation: \`daily-log --version\`
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release v${{ needs.validate-release.outputs.version }}
        body_path: changelog.txt
        files: |
          ./artifacts/daily-log-linux-x86_64.tar.gz/daily-log-linux-x86_64.tar.gz
          ./artifacts/daily-log-macos-x86_64.tar.gz/daily-log-macos-x86_64.tar.gz
          ./artifacts/daily-log-macos-aarch64.tar.gz/daily-log-macos-aarch64.tar.gz
          ./artifacts/daily-log-windows-x86_64.zip/daily-log-windows-x86_64.zip
        draft: false
        prerelease: ${{ startsWith(needs.validate-release.outputs.version, '0.') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}