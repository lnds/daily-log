name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get-version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Validate version matches Cargo.toml
      run: |
        CARGO_VERSION=$(grep -E '^version = "' Cargo.toml | sed 's/version = "//; s/"//')
        TAG_VERSION="${{ steps.get-version.outputs.version }}"
        
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "Error: Version mismatch!"
          echo "  Cargo.toml version: $CARGO_VERSION"
          echo "  Git tag version: $TAG_VERSION"
          exit 1
        fi
        echo "Version validation passed: $TAG_VERSION"

    - name: Validate Pragmatic Versioning format
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "Error: Version $VERSION does not match Pragmatic Versioning format"
          exit 1
        fi
        echo "Pragmatic Versioning validation passed: $VERSION"

  build-release:
    name: Build Release Binaries
    needs: validate-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: daily-log-linux-x86_64.tar.gz

          - target: x86_64-apple-darwin
            os: macos-latest
            name: daily-log-macos-x86_64.tar.gz

          - target: aarch64-apple-darwin
            os: macos-latest
            name: daily-log-macos-aarch64.tar.gz

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: daily-log-windows-x86_64.zip

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create release archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.name }} daily-log
        cd ../../..
        ls -la ${{ matrix.name }}

    - name: Create release archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.name }} daily-log.exe
        cd ../../..
        dir ${{ matrix.name }}

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  sign-and-release:
    name: Sign Binaries and Create Release
    needs: [validate-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Flatten artifacts directory
      run: |
        mkdir -p release-files
        find ./artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" release-files/
        done
        ls -la release-files/

    - name: Generate checksums
      run: |
        cd release-files
        # Generate SHA256 checksums
        sha256sum * > checksums.txt
        echo "Generated checksums:"
        cat checksums.txt

    - name: Import GPG key (if available)
      if: env.GPG_PRIVATE_KEY != ''
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        echo "$GPG_PRIVATE_KEY" | gpg --batch --import
        echo "GPG key imported successfully"
        gpg --list-secret-keys

    - name: Sign binaries and checksums (if GPG key available)
      if: env.GPG_PRIVATE_KEY != ''
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        cd release-files
        # Sign each binary archive
        for file in *.tar.gz *.zip; do
          echo "Signing $file..."
          gpg --batch --yes --passphrase="$GPG_PASSPHRASE" --pinentry-mode loopback --detach-sign --armor "$file"
        done
        
        # Sign the checksums file
        gpg --batch --yes --passphrase="$GPG_PASSPHRASE" --pinentry-mode loopback --detach-sign --armor checksums.txt
        
        echo "Generated signatures:"
        ls -la *.asc

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag (handle first release)
        if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
        else
          PREV_TAG=""
        fi
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        
        if [ -n "$PREV_TAG" ]; then
          echo "Generating changelog from $PREV_TAG to $CURRENT_TAG"
          CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
          COMPARE_URL="**Full Changelog**: https://github.com/lnds/daily-log/compare/$PREV_TAG...$CURRENT_TAG"
        else
          echo "Generating changelog for first release $CURRENT_TAG"
          CHANGELOG=$(git log --pretty=format:"- %s")
          COMPARE_URL="**First Release** 🎉"
        fi
        
        # Check if GPG signatures were created
        SIGNATURE_INFO=""
        if [ -f "release-files/checksums.txt.asc" ]; then
          SIGNATURE_INFO="
        ### 🔐 Verification
        
        All binaries are signed with GPG. To verify:
        
        1. **Download the \`.asc\` signature files** along with the binaries
        2. **Import the public key**: \`curl -s https://github.com/lnds.gpg | gpg --import\`
        3. **Verify signature**: \`gpg --verify daily-log-linux-x86_64.tar.gz.asc daily-log-linux-x86_64.tar.gz\`
        4. **Verify checksums**: \`gpg --verify checksums.txt.asc checksums.txt && sha256sum -c checksums.txt\`
        "
        else
          SIGNATURE_INFO="
        ### ✅ Verification
        
        Verify file integrity using the provided \`checksums.txt\`:
        \`\`\`bash
        sha256sum -c checksums.txt
        \`\`\`
        "
        fi
        
        # Write changelog to file for multiline support
        cat > changelog.txt << EOF
        ## What's Changed
        
        $CHANGELOG
        
        $COMPARE_URL
        
        ---
        
        ### 📥 Installation
        
        Download the appropriate binary for your platform:
        
        | Platform | Architecture | Download |
        |----------|-------------|----------|
        | 🐧 Linux | x86_64 | [\`daily-log-linux-x86_64.tar.gz\`](https://github.com/lnds/daily-log/releases/download/$CURRENT_TAG/daily-log-linux-x86_64.tar.gz) |
        | 🍎 macOS | Intel (x86_64) | [\`daily-log-macos-x86_64.tar.gz\`](https://github.com/lnds/daily-log/releases/download/$CURRENT_TAG/daily-log-macos-x86_64.tar.gz) |
        | 🍎 macOS | Apple Silicon (aarch64) | [\`daily-log-macos-aarch64.tar.gz\`](https://github.com/lnds/daily-log/releases/download/$CURRENT_TAG/daily-log-macos-aarch64.tar.gz) |
        | 🪟 Windows | x86_64 | [\`daily-log-windows-x86_64.zip\`](https://github.com/lnds/daily-log/releases/download/$CURRENT_TAG/daily-log-windows-x86_64.zip) |
        
        **Quick Install:**
        \`\`\`bash
        # Extract and verify
        tar -xzf daily-log-*.tar.gz  # or unzip for Windows
        ./daily-log --version
        
        # Add to PATH (optional)
        sudo mv daily-log /usr/local/bin/  # Linux/macOS
        \`\`\`
        
        $SIGNATURE_INFO
        
        ### 🔢 Version
        **daily-log v${{ needs.validate-release.outputs.version }}** - Following [Pragmatic Versioning](https://pragmaticversioning.com/)
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: "daily-log v${{ needs.validate-release.outputs.version }}"
        body_path: changelog.txt
        files: |
          release-files/*
        draft: false
        prerelease: ${{ startsWith(needs.validate-release.outputs.version, '0.') }}
        make_latest: ${{ !startsWith(needs.validate-release.outputs.version, '0.') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }